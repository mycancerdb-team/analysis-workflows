apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: immuno-somatic-exome-workflow
spec:
  volumes:
    - name: pvc-reference
      persistentVolumeClaim:
        claimName: workflow-ref-hg38-dev #### This is subject to change.
  imagePullSecrets:
    - name: mgbio-cred
    - name: mcdb-bot
  templates:
  - name: bwa-align
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: threads
      - name: data-type # normal or cancer
#      - name: exome-fastq-r1
#      - name: exome-fastq-r2
      - name: bam-file
      - name: readGroup
      - name: reference
      - name: provider
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: docker.cancerdb.io/mgbio-workflow/alignment_helper-cwl:1.0.0
      env:
      - name: OUTPUTDIR
        value: "{{inputs.parameters.output-dir}}"
      - name: DATATYPE
        value: "{{inputs.parameters.data-type}}"
      - name: PROVIDER
        value: "{{inputs.parameters.provider}}"
      command: ['/root/run_step.sh']
      args: ["-b", "{{inputs.parameters.bam-file}}", "-g", "{{inputs.parameters.readGroup}}", "-r", "{{inputs.parameters.reference}}", "-n", "{{inputs.parameters.threads}}"]
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: aligned_bam
          value: "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_bwa/{{inputs.parameters.provider}}_{{inputs.parameters.data-type}}-aligned.bam"
  - name: name-sort
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: threads
      - name: data-type # normal or cancer or rna
      - name: bam-file
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: mgibio/sambamba-cwl:0.6.4
      command: ['/usr/bin/sambamba']
      args: ["sort", "{{inputs.parameters.bam-file}}", "-t", "{{inputs.parameters.threads}}", "-m", "32G", "-n", "-o", "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_namesort/{{inputs.parameters.data-type}}_NameSorted.bam"]
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: name_sorted_bam
          value: "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_namesort/{{inputs.parameters.data-type}}_NameSorted.bam"
  - name: mark-dup
    inputs:
      parameters:
      - name: "cpu" #10
      - name: "mem" #30
      - name: threads
      - name: data-type
      - name: output-dir
      - name: pvc-name
      - name: bam-file ##Merge or Aligned
      - name: input-sort-order
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: docker.cancerdb.io/mgbio-workflow/mark_duplicates-cwl:1.0.1
      command: ["/root/markduplicates_helper.sh"]
      args: ["{{inputs.parameters.bam-file}}", "{{inputs.parameters.threads}}", "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_dups/{{inputs.parameters.data-type}}_MarkedSorted.bam", "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.data-type}}_MarkedSorted.bam", "{{inputs.parameters.input-sort-order}}"]
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
      - name: marksorted_bam
        value: "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_dups/{{inputs.parameters.data-type}}_MarkedSorted.bam"
      - name: marksorted-bam_bai
        value: "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_dups/{{inputs.parameters.data-type}}_MarkedSorted.bam.bai"
      - name: metrics_file
        value: "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.data-type}}_mark_dups_metrics.txt"
  - name: bqsr
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: reference
      - name: data-type # normal or cancer or rna
      - name: bam-file
      - name: bqsr-intervals
      - name: known-indels
      - name: dbsnp-vcf
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: docker.cancerdb.io/mgbio-workflow/bqsr:1.0.0
      env:
      - name: OUTPUTDIR
        value: "{{inputs.parameters.output-dir}}"
      - name: DATATYPE
        value: "{{inputs.parameters.data-type}}"
      - name: BAM
        value: "{{inputs.parameters.bam-file}}"
      - name: REF
        value: "{{inputs.parameters.reference}}"
      - name: BQSRINT
        value: "{{inputs.parameters.bqsr-intervals}}"
      - name: KNWNINDELS
        value: "{{inputs.parameters.known-indels}}"
      - name: DBSNP
        value: "{{inputs.parameters.dbsnp-vcf}}"
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: bqsr_table
          value: "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_bqsr/{{inputs.parameters.data-type}}_bqsr.table"
  - name: apply-bqsr
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: id
      - name: reference
      - name: data-type # normal or cancer or rna
      - name: bam-file
      - name: bqsr-table
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: mgibio/gatk-cwl:3.6.0
      command: ['/usr/bin/java']
      args: ["-Xmx16g", "-jar", "/opt/GenomeAnalysisTK.jar", "-T", "PrintReads", "-R", "{{inputs.parameters.reference}}", "-I", "{{inputs.parameters.bam-file}}", "-BQSR", "{{inputs.parameters.bqsr-table}}", "-o", "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.data-type}}_{{inputs.parameters.id}}.bam", "-preserveQ", "6", "-SQQ", "10", "-SQQ", "20", "-SQQ", "30", "-nct", "8", "--disable_indel_quals"]
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: bqsr_final_bam
          value: "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.data-type}}_{{inputs.parameters.id}}.bam"
### QC Metrics
  - name: insert-size-metrics
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: reference
      - name: data-type # normal or cancer or rna
      - name: bam-file
      - name: metric-accumulation-level
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: mgibio/picard-cwl:2.18.1
      command: ['/usr/bin/java']
      args: ["-Xmx24g", "-jar", "/usr/picard/picard.jar", "CollectInsertSizeMetrics", "O=", "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.data-type}}_InsertSizeMetrics.txt", "H=", "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.data-type}}_InsertSizeHistogram.pdf", "I=", "{{inputs.parameters.bam-file}}", "REFERENCE_SEQUENCE=", "{{inputs.parameters.reference}}", "METRIC_ACCUMULATION_LEVEL=", "{{inputs.parameters.metric-accumulation-level}}"]
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: insert_size_metrics
          value: "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.data-type}}_InsertSizeMetrics.txt"
        - name: insert_size_histogram
          value: "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.data-type}}_InsertSizeHistogram.pdf"
  - name: align-summary-metrics
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: reference
      - name: data-type # normal or cancer or rna
      - name: bam-file
      - name: metric-accumulation-level
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: mgibio/picard-cwl:2.18.1
      command: ['/usr/bin/java']
      args: ["-Xmx24g", "-jar", "/usr/picard/picard.jar", "CollectAlignmentSummaryMetrics", "OUTPUT=", "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.data-type}}_AlignmentSummaryMetrics.txt", "INPUT=", "{{inputs.parameters.bam-file}}", "REFERENCE_SEQUENCE=", "{{inputs.parameters.reference}}", "METRIC_ACCUMULATION_LEVEL=", "{{inputs.parameters.metric-accumulation-level}}"]
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: alignment_summary_metrics
          value: "{{items.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.data-type}}_AlignmentSummaryMetrics.txt"
## Collect HS Metrics
  - name: collect-hs-metrics
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: reference
      - name: data-type # normal or cancer or rna
      - name: bam-file
      - name: metric-accumulation-level
      - name: bait-intervals
      - name: target-intervals
      - name: per_target_coverage
      - name: per_base_coverage
      - name: output_prefix
      - name: minimum_mapping_quality
      - name: minimum_base_quality
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: docker.cancerdb.io/mgbio-workflow/hs-metrics:1.0.0
      env:
      - name: OUTPUTDIR
        value: "{{inputs.parameters.output-dir}}"
      - name: DATATYPE
        value: "{{inputs.parameters.data-type}}"
      - name: BAMFILE
        value: "{{inputs.parameters.bam-file}}"
      - name: REFGENOME
        value: "{{inputs.parameters.reference}}"
      - name: METRICACCUMLVL
        value: "{{inputs.parameters.metric-accumulation-level}}"
      - name: BAITINTV
        value: "{{inputs.parameters.bait-intervals}}"
      - name: TRGTINTV
        value: "{{inputs.parameters.target-intervals}}"
      - name: PERTRGTCVRG
        value: "{{inputs.parameters.per_target_coverage}}" #boolean
      - name: PERBSECVRG
        value: "{{inputs.parameters.per_base_coverage}}" #boolean
      - name: OUTPTPRFX
        value: "{{inputs.parameters.output_prefix}}"
      - name: MINMPQL
        value: "{{inputs.parameters.minimum_mapping_quality}}"
      - name: MINBSQL
        value: "{{inputs.parameters.minimum_base_quality}}"
      command: ['/root/run_step.sh']
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: hs_metrics
          value:  "{{items.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.output_prefix}}_{{inputs.parameters.data-type}}_HsMetrics.txt"
        - name: per_target_coverage_metrics
          value: "{{items.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.output_prefix}}_{{inputs.parameters.data-type}}_PerTargetCoverage.txt"
        - name: per_base_coverage_metrics
          value: "{{items.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.output_prefix}}_{{inputs.parameters.data-type}}_PerBaseCoverage.txt"
## flagstat
  - name: samtools-flagstat
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: data-type # normal or cancer or rna
      - name: bam-file
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: docker.cancerdb.io/mgbio-workflow/flagstat:1.0.0
      env:
      - name: OUTPUTDIR
        value: "{{inputs.parameters.output-dir}}"
      - name: DATATYPE
        value: "{{inputs.parameters.data-type}}"
      - name: BAM
        value: "{{inputs.parameters.bam-file}}"
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: flagstats
          value:  "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.data-type}}.flagstat"
## select variants
  - name: select-variants
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: reference
      - name: vcf-ref
      - name: target-intervals
      - name: service
      - name: filename
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: mgibio/gatk-cwl:3.6.0
      command: ['/usr/bin/java']
      args: ["-Xmx8g", "-jar", "/opt/GenomeAnalysisTK.jar", "-T", "SelectVariants", "-o", "{{inputs.parameters.output-dir}}/{{inputs.parameters.service}}/{{inputs.parameters.filename}}.vcf.gz", "-R", "{{inputs.parameters.reference}}", "--variant", "{{inputs.parameters.vcf-ref}}", "-L", "{{inputs.parameters.target-intervals}}"]
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: filtered_vcf
          value:  "{{inputs.parameters.output-dir}}/{{inputs.parameters.service}}/{{inputs.parameters.filename}}.vcf.gz"
  - name: fp-filter-select-variants
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: reference
      - name: vcf-ref
      - name: target-intervals
      - name: service
      - name: filename
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: mgibio/gatk-cwl:3.6.0
      command: ['/usr/bin/java']
      args: ["-Xmx8g", "-jar", "/opt/GenomeAnalysisTK.jar", "-T", "SelectVariants", "-o", "{{inputs.parameters.output-dir}}/{{inputs.parameters.service}}/{{inputs.parameters.filename}}.vcf.gz", "-R", "{{inputs.parameters.reference}}", "--variant", "{{inputs.parameters.vcf-ref}}", "-L", "{{inputs.parameters.target-intervals}}", "--excludeFiltered"]
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: filtered_vcf
          value:  "{{inputs.parameters.output-dir}}/{{inputs.parameters.service}}/{{inputs.parameters.filename}}.vcf.gz"
## verify bam_id
  - name: verify-bamid
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: data-type # normal or cancer or rna
      - name: vcf-ref #select_vars vcf
      - name: bam-file
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: mgibio/verify_bam_id-cwl:1.1.3
      command: ['/usr/local/bin/verifyBamID']
      args: ["--out", "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.data-type}}.VerifyBamId", "--vcf", "{{inputs.parameters.vcf-ref}}", "--bam", "{{inputs.parameters.bam-file}}"]
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: verify_bam_id_metrics
          value:  "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.data-type}}.VerifyBamId.selfSM"
        - name: verify_bam_id_depth
          value:  "{{inputs.parameters.output-dir}}/{{inputs.parameters.data-type}}_final/{{inputs.parameters.data-type}}.VerifyBamId.depthSM"
#Concordance
  - name: concordance
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: cancer-bam
      - name: normal-bam
      - name: vcf-ref #somalier_vcf
      - name: reference
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: brentp/somalier:v0.1.5
      command: ['/usr/bin/somalier']
      args: ["-o", "{{inputs.parameters.output-dir}}/final/concordance", "-s", "{{inputs.parameters.vcf-ref}}", "-f", "{{inputs.parameters.reference}}", "{{inputs.parameters.cancer-bam}}", "{{inputs.parameters.normal-bam}}"]
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: somalier_pairs
          value: "{{inputs.parameters.output-dir}}/final/concordance.somalier.pairs.tsv"
        - name: somalier_samples
          value: "{{inputs.parameters.output-dir}}/final/concordance.somalier.samples.tsv"
  - name: cnv-kit
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: id
      - name: cancer-bam
      - name: normal-bam
      - name: bait-intervals
      - name: reference
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: etal/cnvkit:0.9.5
      command: ['/usr/bin/python']
      args: ["/usr/local/bin/cnvkit.py", "batch", "{{inputs.parameters.cancer-bam}}", "--normal", "{{inputs.parameters.normal-bam}}", "--targets", "{{inputs.parameters.bait-intervals}}", "--fasta", "{{inputs.parameters.reference}}", "--method", "hybrid", "--output-dir", "{{inputs.parameters.output-dir}}/cnvkit"]
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: intervals_antitarget
          value: "{{inputs.parameters.output-dir}}/cnvkit/bait.antitarget.bed"
        - name: intervals_target
          value:  "{{inputs.parameters.output-dir}}/cnvkit/bait.target.bed"
        - name: normal_antitarget_coverage
          value: "{{inputs.parameters.output-dir}}/cnvkit/normal_{{inputs.parameters.id}}.antitargetcoverage.cnn"
        - name: normal_target_coverage
          value: "{{inputs.parameters.output-dir}}/cnvkit/normal_{{inputs.parameters.id}}.targetcoverage.cnn"
        - name: reference_coverage
          value: "{{inputs.parameters.output-dir}}/cnvkit/reference.cnn"
        #- name: cn_diagram
        #  value: "{{inputs.parameters.output-dir}}/cnvkit/"
        #- name: cn_scatter_plot
        #  value: "{{inputs.parameters.output-dir}}/cnvkit/"
        - name: tumor_antitarget_coverage
          value: "{{inputs.parameters.output-dir}}/cnvkit/cancer_{{inputs.parameters.id}}.antitargetcoverage.cnn"
        - name: tumor_target-coverage
          value: "{{inputs.parameters.output-dir}}/cnvkit/cancer_{{inputs.parameters.id}}.targetcoverage.cnn"
        - name: tumor_bin_level_ratios
          value: "{{inputs.parameters.output-dir}}/cnvkit/cancer_{{inputs.parameters.id}}.cnr"
        - name: tumor_segmented_ratios
          value: "{{inputs.parameters.output-dir}}/cnvkit/cancer_{{inputs.parameters.id}}.cns"
#manta_somatic
  - name: manta-somatic
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: cancer-bam
      - name: normal-bam
      - name: reference
      #- name: call-regions
      #- name: non-wgs
      #- name: output-contigs
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: docker.cancerdb.io/mgbio-workflow/manta:1.5.0
      env:
      - name: REFGENOME
        value: "{{inputs.parameters.reference}}"
      - name: CANCERBAM
        value: "{{inputs.parameters.cancer-bam}}"
      - name: NORMALBAM
        value: "{{inputs.parameters.normal-bam}}"
      - name: OUTPUTDIR
        value: "{{inputs.parameters.output-dir}}"
      command: ['/root/run_step.sh']
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: diploid_variants
          value: "{{inputs.parameters.output-dir}}/manta/MantaWorkflow/results/variants/diploidSV.vcf.gz"
        - name: somatic_variants
          value: "{{inputs.parameters.output-dir}}/manta/MantaWorkflow/results/variants/somaticSV.vcf.gz"
        - name: all_candidates
          value: "{{inputs.parameters.output-dir}}/manta/MantaWorkflow/results/variants/candidateSV.vcf.gz"
        - name: small_candidates
          value: "{{inputs.parameters.output-dir}}/manta/MantaWorkflow/results/variants/candidateSmallIndels.vcf.gz"
        - name: tumor_only_variants
          value: "{{inputs.parameters.output-dir}}/manta/MantaWorkflow/results/variants/tumorSV.vcf.gz"
#bam_to_cram
  - name: bam-to-cram
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: reference
      - name: bam
      - name: service
      - name: id
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: mgibio/samtools-cwl:1.0.0
      workingDir: "{{inputs.parameters.output-dir}}/{{inputs.parameters.service}}_final"
      command: ['/opt/samtools/bin/samtools']
      args: ["view", "-C", "-T", "{{inputs.parameters.reference}}", "{{inputs.parameters.bam}}", "-o", "{{inputs.parameters.output-dir}}/{{inputs.parameters.service}}_final/{{inputs.parameters.service}}_{{inputs.parameters.id}}.cram"] ## need to convert to script with popd
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: crammed-bam
          value: "{{inputs.parameters.output-dir}}/{{inputs.parameters.service}}_final/{{inputs.parameters.service}}_{{inputs.parameters.id}}.cram"
#index_cram
  - name: index-cram
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: cram
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: mgibio/samtools-cwl:1.0.0
      command: ['/opt/samtools/bin/samtools']
      args: ["index", "{{inputs.parameters.cram}}", "{{inputs.parameters.cram}}.crai"]
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: indexed-cram
          value: "{{inputs.parameters.cram}}.crai"
  - name: interval-list-expand
    inputs:
      parameters:
      - name: pvc-name
      - name: "cpu" #2
      - name: "mem" #4g
      - name: interval-list
      - name: roi-padding #100
      - name: id
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: mgibio/picard-cwl:2.18.1
      command: ['/usr/bin/java']
      args: ["-Xmx4g", "-jar", "/usr/picard/picard.jar", "IntervalListTools", "OUTPUT=/ref-hg38/somatic_inputs/intervals/{{inputs.parameters.id}}.expanded.interval_list", "UNIQUE=TRUE", "INPUT={{inputs.parameters.interval-list}}", "PADDING={{inputs.parameters.roi-padding}}"]
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: expanded_interval_list
          value: "/ref-hg38/somatic_inputs/intervals/{{inputs.parameters.id}}.expanded.interval_list"
  - name: merge-bams
    inputs:
      parameters:
      - name: pvc-name
      - name: output-dir
      - name: "cpu"
      - name: "mem"
      - name: threads
      - name: id
      - name: dir
      - name: bam1
      - name: bam2
      - name: bam3
    podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
    volumes:
      - name: '{{inputs.parameters.pvc-name}}'
        persistentVolumeClaim:
          claimName: '{{inputs.parameters.pvc-name}}'
    container:
      image: mgibio/samtools-cwl:1.0.0
      command: ['/opt/samtools/bin/samtools']
      args: ["merge", "--threads", "4", "{{inputs.parameters.output-dir}}/{{inputs.parameters.dir}}/{{inputs.parameters.id}}_merged.bam", "{{inputs.parameters.bam1}}", "{{inputs.parameters.bam2}}", "{{inputs.parameters.bam3}}"]
      imagePullPolicy: Always
      volumeMounts:
      - name: '{{inputs.parameters.pvc-name}}'
        mountPath: /data
      - name: pvc-reference
        mountPath: /ref-hg38
    outputs:
      parameters:
        - name: merged_bam
          value: "{{inputs.parameters.output-dir}}/{{inputs.parameters.dir}}/{{inputs.parameters.id}}_merged.bam"
  #- name: ###
  #  inputs:
  #    parameters:
  #    - name: pvc-name
  #    - name: output-dir
  #    - name: "cpu"
  #    - name: "mem"
  #    - name: threads
  #    - name: ###
  #    - name: ###
  #    - name: ###
  #  podSpecPatch: '{"containers":[{"name":"main", "resources":{"requests":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }, "limits":{"memory": "{{inputs.parameters.mem}}", "cpu": "{{inputs.parameters.cpu}}" }}}]}'
  #  volumes:
  #    - name: '{{inputs.parameters.pvc-name}}'
  #      persistentVolumeClaim:
  #        claimName: '{{inputs.parameters.pvc-name}}'
  #  container:
  #    image: ##### docker.cancerdb.io/mgbio-workflow/
  #    env:
  #    - name: ###
  #      value: ###
  #    command: ['###']
  #    args: ["###"]
  #    imagePullPolicy: Always
  #    volumeMounts:
  #    - name: '{{inputs.parameters.pvc-name}}'
  #      mountPath: /data
  #    - name: pvc-reference
  #      mountPath: /ref-hg38
  #  outputs:
  #    parameters:
  #      - name: ###
  #        value: ###
